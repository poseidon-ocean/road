package com.adagio.designpatterns.decorator;

import java.io.DataInputStream;
import java.io.FilterInputStream;
import java.io.InputStream;

/**
 * 为了某个实现类在不修改原始类的基础上进行动态地覆盖活着增加方法
 * 该实现保持跟原有类的层级关系
 * 采用装饰模式
 * 
 * 与适配器模式区别：
 * 装饰器模式实际上是一种非常特殊的适配器模式
 * 配器模式：兼容
 * 装饰器模式：包装
 *
 */
public class DecoratorDemo {

	public static void main(String[] args) {
		InputStream in = null;
		FilterInputStream fis = new DataInputStream(in);
	}
	/**
	 
======================================================
装饰器模式											适配器模式				
---------------------------------------------------------------------
是一种非常特殊的适配器模式						可以不保留层级关系
---------------------------------------------------------------------
装饰者与被装饰者都要实现同一个接口，				适配者和被适配者没有必然的关系
主要目的是为了扩展，依旧保留OOP				通常使用代理或者继承形式进行包装
----------------------------------------------------------------------
满足is-a的关系								满足has-a的关系
----------------------------------------------------------------------
注重的是覆盖、扩展							注重兼容、转换
----------------------------------------------------------------------


	 */
}
